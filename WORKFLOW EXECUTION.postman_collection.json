{
	"info": {
		"_postman_id": "e11e4e3e-a6eb-41a9-859a-222c91e0b88c",
		"name": "WORKFLOW EXECUTION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5040522"
	},
	"item": [
		{
			"name": "NON CONDITIONAL TEST EXECUTION",
			"item": [
				{
					"name": "LIST USERS-PAGE#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"page\");\r",
									"        pm.expect(pm.response.text()).to.include(\"id\");\r",
									"        pm.expect(pm.response.text()).to.include(\"email\");\r",
									"        pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"        pm.expect(pm.response.text()).to.include(\"George\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"CREATE USER\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=1",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LIST USERS-PAGE#2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"page\");\r",
									"        pm.expect(pm.response.text()).to.include(\"id\");\r",
									"        pm.expect(pm.response.text()).to.include(\"email\");\r",
									"        pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"        pm.expect(pm.response.text()).to.include(\"Lindsay\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"2\");\r",
									"        pm.expect(pm.response.text()).to.include(\"id\");\r",
									"        pm.expect(pm.response.text()).to.include(\"email\");\r",
									"        pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"        pm.expect(pm.response.text()).to.include(\"Janet\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"UPDATE USER\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "SINGLE USER NOT FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is Not Found\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"DELETE USER\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/23",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"id\");\r",
									"        pm.expect(pm.response.text()).to.include(\"name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"job\");\r",
									"        pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"SINGLE USER\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Pavitra\",\r\n    \"job\": \"Test Engineer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"job\");\r",
									"        pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"SINGLE USER NOT FOUND\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Pavitra M\",\r\n    \"job\": \"Sr.Test Engineer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/157",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"157"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204\", function () {\r",
									"        pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is No Content\", function () {\r",
									"        pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"        pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"postman.setNextRequest(\"LIST USERS-PAGE#2\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/157",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"157"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CONDITIONAL TEST EXECUTION",
			"item": [
				{
					"name": "LIST USERS-PAGE#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"page\");\r",
									"        pm.expect(pm.response.text()).to.include(\"id\");\r",
									"        pm.expect(pm.response.text()).to.include(\"email\");\r",
									"        pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"        pm.expect(pm.response.text()).to.include(\"George\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"CREATE USER\");\r",
									"}\r",
									"else   {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=1",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LIST USERS-PAGE#2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"page\");\r",
									"        pm.expect(pm.response.text()).to.include(\"id\");\r",
									"        pm.expect(pm.response.text()).to.include(\"email\");\r",
									"        pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"        pm.expect(pm.response.text()).to.include(\"Lindsay\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"LIST USERS-PAGE#2\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SINGLE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"2\");\r",
									"        pm.expect(pm.response.text()).to.include(\"id\");\r",
									"        pm.expect(pm.response.text()).to.include(\"email\");\r",
									"        pm.expect(pm.response.text()).to.include(\"first_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"last_name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"avatar\");\r",
									"        pm.expect(pm.response.text()).to.include(\"Janet\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"UPDATE USER\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "SINGLE USER NOT FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 404\", function () {\r",
									"        pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is Not Found\", function () {\r",
									"        pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"if(pm.response.code==404) {\r",
									"        postman.setNextRequest(\"DELETE USER\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/23",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						}
					},
					"response": []
				},
				{
					"name": "CREATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 201\", function () {\r",
									"        pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"id\");\r",
									"        pm.expect(pm.response.text()).to.include(\"name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"job\");\r",
									"        pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==201) {\r",
									"        postman.setNextRequest(\"SINGLE USER\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Pavitra\",\r\n    \"job\": \"Test Engineer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is OK\", function () {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json; charset=utf-8\", function () {\r",
									"        pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is present\", function () {\r",
									"        pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body contains mandatory fields\", function () {\r",
									"        pm.expect(pm.response.text()).to.include(\"name\");\r",
									"        pm.expect(pm.response.text()).to.include(\"job\");\r",
									"        pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
									"});\r",
									"\r",
									"if (pm.response.code==200) {\r",
									"        postman.setNextRequest(\"SINGLE USER NOT FOUND\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Pavitra M\",\r\n    \"job\": \"Sr.Test Engineer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/157",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"157"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify if response code is 204\", function () {\r",
									"        pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response description is No Content\", function () {\r",
									"        pm.response.to.have.status(\"No Content\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response time < 400ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if response body is not present\", function () {\r",
									"        pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"if (pm.response.code==204) {\r",
									"        postman.setNextRequest(\"LIST USERS-PAGE#2\");\r",
									"}\r",
									"else {\r",
									"        postman.setNextRequest(\"\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/157",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"157"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}